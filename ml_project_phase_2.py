# -*- coding: utf-8 -*-
"""ML_project_phase_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19I48OQURPEnusXAKDHgA-fu1t7LR0MJZ
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import glob
import random
import numpy as np
import pandas as pd
from PIL import Image
from sklearn.svm import SVC
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Your initial imports and data loading
# ... (all the imports and data loading) ...

# Rest of your code for data loading and pre-processing
# ... (loading data, image preprocessing) ...

! unzip /content/drive/MyDrive/Project_ml/HAR.zip

train_csv = pd.read_csv("/content/Human Action Recognition/Training_set.csv")
test_csv = pd.read_csv("/content/Human Action Recognition/Testing_set.csv")

train_fol = "/content/Human Action Recognition/train/"
test_fol = "/content/Human Action Recognition/test/"

len(train_fol)

len(test_fol)

train_csv

train_csv.label.value_counts()

import plotly.express as px
l = train_csv.label.value_counts()
fig = px.pie(train_csv, values=l.values, names=l.index, title='Distribution of Human Activity')
fig.show()

filename = train_csv['filename']

situation = train_csv['label']

situation

filename

"""**Creating a function to random take a image and display it with its label**"""

def disp():
    num = random.randint(1,10000)
    imgg = "Image_{}.jpg".format(num)
    train = "/content/Human Action Recognition/train/"
    if os.path.exists(train+imgg):
        testImage = img.imread(train+imgg)
        plt.imshow(testImage)
        plt.title("{}".format(train_csv.loc[train_csv['filename'] == "{}".format(imgg), 'label'].item()))

    else:
        #print(train+img)
        print("File Path not found \nSkipping the file!!")

disp()

disp()

disp()

disp()

"""**Processing data**"""

len(train_fol)

img_data = []
img_label = []

# Iterate through the range of the length of train_fol
for i in range(len(train_fol)):
    t = '/content/Human Action Recognition/train/' + filename[i]

    # Attempt to open the image file
    try:
        temp_img = Image.open(t)
        img_data.append(np.asarray(temp_img.resize((160, 160))))
        img_label.append(situation[i])
    except Exception as e:
        print(f"Error processing image {t}: {e}")

# Check the length of img_data and img_label to ensure data is populated
print(len(img_data), len(img_label))

print(img_label)

print(img_data)

# Prepare data and labels
X = np.asarray(img_data)
y = np.asarray(img_label)

# Flatten the image data
X = X.reshape(X.shape[0], -1)

# Encode labels
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

print(X)
print(y)

# Splitting data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Kernelized SVM model
svm_model = SVC(kernel='rbf', C=15, gamma='auto')  # You might need to adjust parameters

# Training the SVM model
svm_model.fit(X_train, y_train)

# Predict on the test set
y_pred = svm_model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

from sklearn.model_selection import cross_val_score

# Check data shapes
print("Shapes - X_train:", X_train.shape, "y_train:", len(y_train))
print("Shapes - X_test:", X_test.shape, "y_test:", len(y_test))

# Initialize and train model
svm_model = SVC(kernel='rbf', C=15, gamma='auto')
svm_model.fit(X_train, y_train)

# Check accuracy on the training data
train_accuracy = svm_model.score(X_train, y_train)
print("Training Accuracy:", train_accuracy)

# Cross-validation score
cv_scores = cross_val_score(svm_model, X, y_encoded, cv=5)
print("Cross-validation Scores:", cv_scores)
print("Mean CV Score:", np.mean(cv_scores))

# Evaluate on test data
test_accuracy = svm_model.score(X_test, y_test)
print("Test Accuracy:", test_accuracy)

from sklearn.model_selection import GridSearchCV

# Define the parameter grid for GridSearchCV
param_grid = {
    'C': [18, 25, 100],
    'gamma': ['scale', 'auto'],
    'kernel': ['linear', 'rbf', 'poly']
}

# Perform GridSearchCV
grid_search = GridSearchCV(SVC(), param_grid, cv=3)
grid_search.fit(X_train, y_train)

# Get the best parameters and score
print("Best Parameters:", grid_search.best_params_)
print("Best Score:", grid_search.best_score_)

# Evaluate the best model on the test set
best_model = grid_search.best_estimator_
test_accuracy = best_model.score(X_test, y_test)
print("Test Accuracy with Best Model:", test_accuracy)